// ---------------------------------------------------------------------------

#ifndef MainFormH
#define MainFormH
// ---------------------------------------------------------------------------
#include <Classes.hpp>
#include <Controls.hpp>
#include <StdCtrls.hpp>
#include <Forms.hpp>
#include "RzPanel.hpp"
#include "RzStatus.hpp"
#include <ExtCtrls.hpp>
#include <ImgList.hpp>
#include "RzButton.hpp"
#include <Math.hpp>
#include <math.h>
#include "RzSplit.hpp"
#include <Dialogs.hpp>
#include "RzGroupBar.hpp"
#include "RzLstBox.hpp"
#include "RzEdit.hpp"
#include <Mask.hpp>
#include "RzLabel.hpp"
#include <ComCtrls.hpp>
#include "RzTabs.hpp"
#include "Chart.hpp"
#include "Series.hpp"
#include "TeEngine.hpp"
#include "TeeProcs.hpp"
#include "RzRadGrp.hpp"
#include "RzCmboBx.hpp"
#include "cspin.h"
#include "RzSpnEdt.hpp"
#include "Spin.hpp"
#include <GL/gl.h>
#include <GL/glu.h>
// #include <GL/glut.h>
#include <alloc.h>
#define Pi M_PI

typedef struct Target {
	String Name;
	float S;
	float Velocity;
	float Distance;
	float Beta;
	float Length;
	float Height;
	float X, Y;
	float Ampl;
	int Time;
} Target;

typedef struct TRecFreqPackage {
	int Period, CntIZ, CntDskr, EnumKpp;
} TRecFreqPackage;

struct TRecRadar {
	int WaveLength;
	int PulseLength;
	int Deviation;
	int I_F;
	float wDN;
	int ADCClock;
	int ADCWidth;
	int LFMlength;
	float Noise;
	TRecFreqPackage PackRec[4];
};

struct TtmpItemRec {
	double deltaTime, deltaDistance, Beta, Time, Ampl, TimeBack, X, Y;
	int ZapID, PackID, PckgID;
	void* BackItem, *Parent, *ArrData;
};

enum TLFMMode {
	lfmUp, lfmDown
};

enum TStateInput {
	siNone, siManualDrag
};

struct TRecGPSFloat {
	double X, Y, Z, M;
	TStateInput State;
} ResultShiftScene, MousePosMove, MousePosDown, MousePosUp;

// ---------------------------------------------------------------------------
class TForm1 : public TForm {
__published: // IDE-managed Components

	TRzStatusBar *RzStatusBar1;
	TImageList *ImageList1;
	TRzPanel *RzPanel1;
	TRzFieldStatus *RzMapInfo;
	TColorDialog *ColorDialog1;
	TTimer *Timer1;
	TRzPanel *RzPanel2;
	TRzGroupBox *rzgrpbx_target;
	TRzLabel *lbl_epr;
	TRzLabel *lbl_speed;
	TRzMaskEdit *edt_epr;
	TRzMaskEdit *edt_speed;
	TRzGroupBox *rzgrpbx_coord3;
	TRzLabel *lbl_beta3;
	TRzLabel *lbl_D3;
	TRzMaskEdit *edt_beta3;
	TRzMaskEdit *edt_D3;
	TRzGroupBox *rzgrpbx_coord0;
	TRzLabel *lbl_beta0;
	TRzLabel *lbl_D0;
	TRzMaskEdit *edt_beta0;
	TRzMaskEdit *edt_D0;
	TRzGroupBox *rzgrpbx_coord2;
	TRzLabel *lbl_beta2;
	TRzLabel *lbl_D2;
	TRzMaskEdit *edt_beta2;
	TRzMaskEdit *edt_D2;
	TRzToolbar *RzToolbar1;
	TRzToolButton *BtnBackground;
	TRzToolButton *BtnRoute;
	TRzToolButton *BtnRestart;
	TRzToolButton *BtnAddTV;
	TMemo *Memo1;
	TTreeView *TV;
	TRzToolButton *BtnAddTarget;
	TRzPageControl *RzPageControl1;
	TRzTabSheet *TabSheet1;
	TRzTabSheet *TabSheet2;
	TRzToolButton *BtnPlot;
	TChart *Chart1;
	TChart *Chart2;
	TChart *Chart3;
	TLineSeries *Series1;
	TLineSeries *Series2;
	TLineSeries *Series3;
	TRzToolButton *BtnDebug;
	TRzTabSheet *TabSheet3;
	TMemo *Memo2;
	TMemo *Memo3;
	TMemo *Memo4;
	TMemo *Memo5;
	TMemo *Memo6;
	TRzToolButton *BtnData;
	TMemo *Memo7;
	TMemo *Memo8;
	TRzRadioGroup *RzRadioGroup1;
	TRzGroupBox *rzgrpbx_radar;
	TRzComboBox *RzComboBox1;
	TRzEditListBox *RzEditListBox1;
	TRzEditListBox *RzEditListBox2;
	TRzEditListBox *RzEditListBox3;
	TRzRadioGroup *RzRadioGroup2;
	TRzGroupBox *rzgrpbx_coord1;
	TRzLabel *lbl_beta1;
	TRzLabel *lbl_D1;
	TRzMaskEdit *edt_beta1;
	TRzMaskEdit *edt_D1;

	void __fastcall FormCreate(TObject *Sender);
	void __fastcall FormDestroy(TObject *Sender);
	void __fastcall FormMouseWheel(TObject *Sender, TShiftState Shift, int WheelDelta, TPoint &MousePos, bool &Handled);
	void __fastcall RzPanel1Paint(TObject *Sender);
	void __fastcall RzPanel1MouseMove(TObject *Sender, TShiftState Shift, int X, int Y);
	void __fastcall BtnBackgroundClick(TObject *Sender);
	void __fastcall RzPanel1Click(TObject *Sender);
	void __fastcall Timer1Timer(TObject *Sender);
	void __fastcall BtnRouteClick(TObject *Sender);
	void __fastcall BtnRestartClick(TObject *Sender);
	void __fastcall TVClick(TObject *Sender);
	void __fastcall BtnAddTVClick(TObject *Sender);
	void __fastcall BtnAddTargetClick(TObject *Sender);
	void __fastcall BtnDebugClick(TObject *Sender);
	void __fastcall edt_beta1Enter(TObject *Sender);
	void __fastcall BtnDataClick(TObject *Sender);
	void __fastcall RzPanel1MouseDown(TObject *Sender, TMouseButton Button, TShiftState Shift, int X, int Y);
	void __fastcall RzPanel1MouseUp(TObject *Sender, TMouseButton Button, TShiftState Shift, int X, int Y);

	void __fastcall FormKeyPress(TObject *Sender, wchar_t &Key);
	void __fastcall edt_D0Change(TObject *Sender);

private: // User declarations

	void DrawSweep();
	void PaintPoint();
	void AddPoint();
	void PaintBezier();
	void SetDCPixelFormat(HDC hdc);
	void PaintGrid();
	void PaintTarget();
	void InitViewProection();
	void InitViewProection(float x, float y, float dXX, float dYY);
	void PaintCurrentCircle();

	HWND hwnd1;
	HGLRC hrc1;
	HDC dc1;

	GLfloat MCGrid[4];
	GLfloat MCPoint[4];
	GLfloat MCTarget[4];
	GLfloat tX, tY, DX, DY;

	double linePoints[58][2];

public: // User declarations

	float PosZoomX1, PosZoomY1, PosZoomX2, PosZoomY2, Diagonal, Zoom;

	void __fastcall TForm1::Textout(char* str, GLfloat x, GLfloat y, GLfloat *color);

	TRecRadar Radar;
	Target currentTarget;
	TtmpItemRec *tmpItem;
	int *TimeArr;
	float *BetaArr;
	int TimeOfPacket;
	float BetaOfPacket;

	int DistanceToDiskret(float Distance);
	float DiskretToDistance(int Diskret);
	void FillListPulses(int &Index, TList * ListPulses);
	void UpdateListPulses();
	int GetShiftADCClock(float dT);
	void GetADCPulseLFM(bool EnPulses, TtmpItemRec RN, double IArr[], int Shift);
	void ADCGenerateTargetLFM(bool EnPulses, TLFMMode UpDown, double Arr[], float dbKu, float DeltaTimePulse, float Deviation, float Phase,
		float dbNoise, int Shift);
	void DarwModuleDiskrets(TtmpItemRec *RN);

	TPoint FQ(double Arr[], float Scale);

	int GetCountSamplesOfPulse();
	int GetCountSamplesOfPulseLFM();
	float PulseToTime(int PacketID, int PackageID, int PulseId);
	int GetCountPulsesOfPacket();
	int GetCountPacketOfRotaion();
	int GetCountRotation();
	float GetTimePackage(int PackageID);
	int GetCountPackages();
	float GetTimePacket();
	float GetAzimutOfTime(float Time);

	TTreeNode* AddNodeRoot(void);
	TTreeNode * AddNodeRot(int i);
	TTreeNode * TForm1::AddNodePacket(TTreeNode * Parent, int i);
	TTreeNode* AddNodePackage(TTreeNode * Parent, int i);
	TTreeNode* AddNodePulses(TTreeNode * Parent, int i);
	Target* AddTarget();

	TList *ListTr;

	__fastcall TForm1(TComponent * Owner);
};

// ---------------------------------------------------------------------------
extern PACKAGE TForm1 *Form1;
// ---------------------------------------------------------------------------
#endif
